Client creation----

{
"username" : {
"username": "priyansh12"},
"Age": "12",
"TechnicalField": "1",
"NonTechnicalField": "1",
"Institute": "Pce",
"city_Name": "1",
"confirm_password": "12345678",
"email": "rahul@gmail.com",
"password": "12345678"
   }

{
"name": "rahul",
"username" : {
"username": "priyansh192"
},
"Age": "12",
"TechnicalField": "1",
"NonTechnicalField": "1",
"Institute": "Pce",
"city_Name": "1",
"confirm_password": "12345678",
"email": "rahul@gmail.com",
"password": "12345678"
   }

Like-----------------------------------------------------------------------------------------------------------
{
"Post" : "1",
}
UnLike-----------------------------------------------------------------------------------------------------------
{
"Post" : "1"
}

Comment-----------------------------------------------------------------------------------------------------------
{
    "Post_comment": "Best Post",

    "Post": "1"

}


'''
class post_reccomendation(viewsets.ViewSet):
    #authentication_classes = [TokenAuthentication]
    #permission_classes = [IsAuthenticated]
    def create(self,request):
        serializer=friend_reccomendation_serializer(data=request.data)
        if serializer.is_valid():
            u=user=serializer.data['User']
            try:


                User_info.objects.get(id=u)
            except:

                return Response("user not present")

            d=Followers_User.objects.all()
            z=[]
            for i in d:
                z.append({"user":i.User.id,"Follower":i.Followers.id})
            df=pd.DataFrame(z)
            try:

                c=ml_friend.FriendGraph(df)
            except:
                return Response("Something Wrong")

            g=[]


            for i in c.recommend_friend(int(u)):
                g.append(i)
            if(len(g)==0):
                return Response("Nothing to reccomended")
            y=request.data.get("User")
            for i in range(0,len(g)-1):
                if(str(g[i])==str(u)):
                    g.pop(i)
            return Response(g)


        else:
            return Response(serializer.errors)


'''

'''class post_reccomendation(viewsets.ViewSet):
    #authentication_classes = [TokenAuthentication]
    #permission_classes = [IsAuthenticated]
    def list(self,request):
        user=request.user

        try:

            u=User_info.objects.get(username=user)
        except:
            return Response("user not present")



        l=[]
        d=[]
        userinfo=[]
        userinfo.append({"username":u.id,"name":u.name,"Institute":u.Institute,"TechnicalField":u.TechnicalField.TechnicalName,"NonTechnicalField":u.NonTechnicalField.NonTechnicalName,"city_Name":u.city_Name.CityName,"CreatedDate_user":u.CreatedDate,"UpdateDate_user":u.UpdateDate})
        image=[]
        queryset=post.objects.all()
        try:






            for i in queryset:





                image.append({"Id":i.Post_Content.id,"username": i.User.id,"CreatedDate":i.CreatedDate,"UpdateDate":i.UpdateDate,"LikeCount":i.LikeCount,"UnLikeCount":i.UnLikeCount,"Institute_user_post":i.User.Institute,"TechnicalField":i.User.TechnicalField.TechnicalName,"NonTechnicalField":i.User.NonTechnicalField.NonTechnicalName,"city_Name":i.User.city_Name.CityName,"post_title":i.Post_Content.Post_Title,"Text":i.Post_Content.Text,"CreatedDate_user":i.User.CreatedDate,"UpdateDate_user":i.User.UpdateDate})
            h=[]
            for i in ml.add(image,userinfo):
                for j in i:

                    h.append(j)
            for g in h:
                for i in queryset:
                    if(i.Post_Content.id==g):
                            if(i.Post_Content.Image and i.User.img):

                                d.append({"id":i.id,"LikeCount":i.LikeCount,"UnLikeCount":i.UnLikeCount,"content":{
                                    "id":i.Post_Content.id,"Post_Title":i.Post_Content.Post_Title,"Image":i.Post_Content.Image.url,"Text"
                                    :i.Post_Content.Text
                                },


                                          "user":{
                                              "id":i.User.id,"email":i.User.email,"name":i.User.name,"img":i.User.img.url
                                          }

                                          })
                            elif(i.Post_Content.Image):

                                d.append({"id":i.id,"LikeCount":i.LikeCount,"UnLikeCount":i.UnLikeCount,"content":{
                                    "id":i.Post_Content.id,"Post_Title":i.Post_Content.Post_Title,"Image":i.Post_Content.Image.url,"Text"
                                    :i.Post_Content.Text
                                },


                                          "user":{
                                              "id":i.User.id,"email":i.User.email,"name":i.User.name,"img":"null"
                                          }

                                          })
                            elif(i.User.img):
                                d.append({"id":i.id,"LikeCount":i.LikeCount,"UnLikeCount":i.UnLikeCount,"content":{
                                    "id":i.Post_Content.id,"Post_Title":i.Post_Content.Post_Title,"Image":0,"Text"
                                    :i.Post_Content.Text
                                },


                                          "user":{
                                              "id":i.User.id,"email":i.User.email,"name":i.User.name,"img":i.User.img.url
                                          }

                                          })
                            else:
                                d.append({"id":i.id,"LikeCount":i.LikeCount,"UnLikeCount":i.UnLikeCount,"content":{
                                    "id":i.Post_Content.id,"Post_Title":i.Post_Content.Post_Title,"Image":0,"Text"
                                    :i.Post_Content.Text
                                },


                                          "user":{
                                              "id":i.User.id,"email":i.User.email,"name":i.User.name,"img":"null"
                                          }

                                          })
            return Response(d)
        except:
            return Response("user post required")

'''




'''import pandas as pd
import pandas as pd
import numpy as np
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import nltk
import math
import time
import re
import os
from nltk.stem.snowball import SnowballStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
stopwords = set(stopwords.words('english'))
from sklearn.metrics import pairwise_distances
from collections import Counter

global postId
def add(data,user):

    postId = []
    #print(ob,'--------------------------------------')
    df=pd.DataFrame(data)
    df_user=pd.DataFrame(user)


    #print('--------------aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')
    #df2=pd.DataFrame(image)

    #print(df_user,'-----------------------------first')
    #print(df)
    #df_user=df_user.to_csv(r'C:\Users\Ankesh\Desktop\user.csv', index=False)
    #df=df.to_csv(r'C:\Users\Ankesh\Desktop\data.csv', index=False)
    #df_user1=df_user.to_csv('user.csv', index=False)
    #df1=df.to_csv('data.csv', index=False)
    #df=df1.copy()
    #df_user=df_user1.copy()
    df['text'] = df['post_title'] + df['Text'] + df['TechnicalField'] + df['NonTechnicalField']

    def tokenization_and_stemming(text):

        text = re.sub(r"[^a-zA-Z]", " ", text)
        tokens = word_tokenize(text)
        stemmer = SnowballStemmer("english")
        clean_tokens = []
        for word in tokens:
            clean_tok = stemmer.stem(word).lower().strip()
            if clean_tok not in stopwords:
                clean_tokens.append(clean_tok)

        return clean_tokens

    from sklearn.feature_extraction.text import TfidfVectorizer
    tf = TfidfVectorizer(analyzer='word',ngram_range=(1, 3),min_df=0, stop_words='english',tokenizer=tokenization_and_stemming)
    tfidf_matrix = tf.fit_transform(df['text'])

    log_id = df_user['username'].to_list()
    username = df['username'].to_list()
    match_index = [key for key, val in enumerate(username) if val in set(log_id)]
    id_user = match_index[0]


    def text_to_vector(text):
        word = re.compile(r'\w+')
        words = word.findall(text)

        return Counter(words)

    def get_result(id_user, content_a, content_b, model):

        text1 = content_a
        text2 = content_b
        vector1 = text_to_vector(str(text1))
        vector2 = text_to_vector(str(text2))



    lis = []
    postId_u = []
    def tfidf_model(id_user,num_results):

        pairwise_dist = pairwise_distances(tfidf_matrix,tfidf_matrix[id_user])
        indices = np.argsort(pairwise_dist.flatten())[0:num_results]
        pdists  = np.sort(pairwise_dist.flatten())[0:num_results]
        user_id = df['username'][id_user]
        df_indices = list(df.index[indices])

        for i in range(0,len(indices)):
            # we will pass 1. doc_id, 2. title1, 3. title2, url, model
            get_result(indices[i], df['text'].loc[df_indices[0]], df['text'].loc[df_indices[i]], 'tfidf')

            us = df["username"].loc[df_indices[i]]
           # us2 = df["username"].loc[df_indices[i]]
            pos= df["post_title"].loc[df_indices[i]]
            tec = df["TechnicalField"].loc[df_indices[i]]
            Ntec = df["NonTechnicalField"].loc[df_indices[i]]
            tex = df["Text"].loc[df_indices[i]]
            creat=df['CreatedDate'].loc[df_indices[i]]
            updat=df['UpdateDate'].loc[df_indices[i]]
            like=df['LikeCount'].loc[df_indices[i]]
            unlik=df['UnLikeCount'].loc[df_indices[i]]
            inst=df['Institute_user_post'].loc[df_indices[i]]
            city=df['city_Name'].loc[df_indices[i]]
            cruser=df['CreatedDate_user'].loc[df_indices[i]]
            up=df['UpdateDate_user'].loc[df_indices[i]]
            tex2=df['text'].loc[df_indices[i]]
            posId = df['Id'].loc[df_indices[i]]
           # Id.append((df['Id']))
            lis.append(( posId,us,pos,tec,Ntec,tex))
        rec = pd.DataFrame(lis,columns = ['Id','username', 'post_title','TechnicalField','NonTechnicalField','Text'])
        rec = rec.drop([0])
        rec =rec[rec.username != user_id]
        postId_u = rec['Id'].values
        return postId_u
    x = tfidf_model(id_user ,30)
    postId.append((x))
    return postId
    '''

'''__author__ = 'PRIYANSH KHANDELWAL'
import numpy as np
import pandas as pd
import networkx as nx
import sys
class FriendGraph(object):
    """Initialize a FriendGraph object to make friend recommendations"""
    def __init__(self,data):
        self.filename = data

    # Put csv data into pandas DataFrame
        self.df = self.load_data(self.filename)

        #self.df.drop([0],axis =1,inplace = True)


    # Create networkx graph from DataFrame
        self.G = self.make_network(self.df)


    def load_data(self, filename):
        """Put data into df if file exists"""

        try:
            df = filename
        except IOError:
            raise IOError('Check that file name and path are correct')

        return df




    def make_network(self, df):
        """Take a DataFrame of undirected friendships and return networkx graph object"""

        G = nx.from_pandas_edgelist(df, df.columns[0], df.columns[1])
        return G

    def friends_set(self, G, node):
        """Returns a set of a given user's friends"""
        return set(G.neighbors(node))

    def friends_of_friends_set(self, G, friends):
        """Given a set of friends, returns a set of friends of friends"""
        friends_of_friends = set()

        for f in friends:
            friends_of_friends.update(G.neighbors(f))
        #print(friends_of_friends)

        return friends_of_friends

    def make_remove_set(self, G, node, friends_of_friends):
        """Removes friends of friends that a user is already friends with"""
        remove_set = set()

        for fof in friends_of_friends:
            if G.has_edge(node, fof):
                remove_set.add(fof)

        return remove_set


    def find_friends_of_friends(self, G, node):
        """Given a user_id, find friends of friends the user is not friends with"""

        # find current friends of user
        friends = self.friends_set(G, node)

        # find friends of friends
        friends_of_friends = self.friends_of_friends_set(G, friends)

        # remove friend_of_friend if fof is friends with user
        remove_set = self.make_remove_set(G, node, friends_of_friends)

        # Remove friends of friends that are in remove set
        friends_of_friends.difference_update(remove_set)

        return list(friends_of_friends)


    def highest_degree(self, G, fof):
        """Given list of friends of friends, return 5 with highest degree"""

        degree_dict = {}
        # Calculate degree for each node, store result in dict
        for f in fof:
            deg = G.degree(f)
            degree_dict[f] = deg

        # Sort by dict values
        sorted_list = sorted(degree_dict, key=degree_dict.get, reverse=True)

        return sorted_list[:5]
    def format_friend_recs(self, user_id, recs):
        """Print 5 friend recommendations to terminal"""



        lis = [r for i, r in enumerate(recs)]


        return lis


    def recommend_friend(self, user_id):
        """Given a user_id, make 5 friend recommendations"""

        # Find friends of friends of user
        friends_of_friends = self.find_friends_of_friends(self.G, user_id)

        # Find 5 most connected friends of friends
        recommendations = self.highest_degree(self.G, friends_of_friends)


        return self.format_friend_recs(user_id, recommendations)
'''